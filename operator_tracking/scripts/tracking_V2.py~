#!/usr/bin/env python
 
##Justin Steinberg 

import rospy
from sensor_msgs.msg import LaserScan
from visualization_msgs.msg import Marker
from geometry_msgs.msg import Point, PointStamped, PoseStamped
import math

CONST_VALUE = .6096/2  #1ft in meters 

class Operator_Tracking(object):

    def __init__ (self):
        self.sub = rospy.Subscriber('scan_filtered', LaserScan, self.tracking_callback)
        self.pose_sub = rospy.Subscriber('/slam_out_pose', PoseStamped, self._poseCallback)
	self.pub = rospy.Publisher('visualization_marker', Marker, queue_size = 10)  
        self.waypoint_pub = rospy.Publisher('/interactive_waypoint_markers/add_waypoint', PoseStamped, queue_size=10) 


        self.marker = Marker() 
        self.marker2 = Marker() 
        self.list_x = []
        self.list_y = []

        self.count = 0.0
        self.sum_sqr_dist_x = 0
        self.sum_sqr_dist_y = 0

        self.prev_std_dev_x = 0   
        self.prev_std_dev_y = 0
    
        self.std_dev_x = .3048
        self.std_dev_y = .3048

        self.average_x = .9144    #x coordinate Distance from robot 
        self.average_y = 0      #y coordinate Distance from robot

        self.prev_avg_x = 0.0
        self.prev_avg_y = 0.0         

        self.cov_sum = 0.0
        self.cov_xy = 0.0
        self.corr_xy = 0.0

    def create_box(self, average_x, average_y, std_dev_x, std_dev_y):

        self.marker.header.frame_id = "laser"
        self.marker.type = self.marker.LINE_STRIP
        self.marker.action = self.marker.ADD
        self.marker.id = 0

        #marker scale
        self.marker.scale.x = .03
        self.marker.scale.y = .03
        self.marker.scale.z = .03
   
        #marker color
        self.marker.color.a = 1.0
        self.marker.color.r = 1.0
        self.marker.color.g = 1.0
        self.marker.color.b = 0.0
    
        #marker orientation
        self.marker.pose.orientation.x = 0.0
        self.marker.pose.orientation.y = 0.0
        self.marker.pose.orientation.z = 0.0
        self.marker.pose.orientation.w = 1.0

        #marker position
        self.marker.pose.position.x = 0.0
        self.marker.pose.position.y = 0.0
        self.marker.pose.position.z = 0.0
  
        #marker line points
        self.marker.points = []
		
        #first point
        first_line_point = Point()
        first_line_point.x = self.average_x + self.std_dev_x
        first_line_point.y = self.average_y + self.std_dev_y
        first_line_point.z = 0.0
        self.marker.points.append(first_line_point)
        #second point
        second_line_point = Point()
        second_line_point.x = self.average_x + self.std_dev_x
        second_line_point.y = self.average_y - self.std_dev_y
        second_line_point.z = 0.0
        self.marker.points.append(second_line_point)
        #third point
        third_line_point = Point()
        third_line_point.x = self.average_x - self.std_dev_x
        third_line_point.y = self.average_y - self.std_dev_y
        third_line_point.z = 0.0
        self.marker.points.append(third_line_point)
        #fourth point
        fourth_line_point = Point()
        fourth_line_point.x = self.average_x - self.std_dev_x
        fourth_line_point.y = self.average_y + self.std_dev_y
        fourth_line_point.z = 0.0
        self.marker.points.append(fourth_line_point)
        #fifth point
        fifth_line_point = Point()
        fifth_line_point.x = self.average_x + self.std_dev_x
        fifth_line_point.y = self.average_y + self.std_dev_y
        fifth_line_point.z = 0.0
        self.marker.points.append(fifth_line_point)


    def create_cylinder(self): #, average_x, average_y, std_dev_x, std_dev_y):

        self.marker2.header.frame_id = "laser"
        self.marker2.type = self.marker.CYLINDER
        self.marker2.action = self.marker.ADD
        self.marker2.id = 1

        #marker scale
        self.marker2.scale.x = .03
        self.marker2.scale.y = .03
        self.marker2.scale.z = .03
   
        #marker color
        self.marker2.color.a = 1.0
        self.marker2.color.r = 1.0
        self.marker2.color.g = 1.0
        self.marker2.color.b = 0.0
    
        #marker orientation
        self.marker2.pose.orientation.x = 0.0
        self.marker2.pose.orientation.y = 0.0
        self.marker2.pose.orientation.z = 0.0
        self.marker2.pose.orientation.w = 1.0

        #marker position
        self.marker2.pose.position.x = 0.0
        self.marker2.pose.position.y = 0.0
        self.marker2.pose.position.z = 0.0

        #scale
        self.marker2.scale.x = .4
        self.marker2.scale.y = .4
        self.marker2.scale.z = 0

    #The tracking_callback creates the initial bounds for the box, the box containing the only
    #points we care to analyize. The average of all the points in the box is then computed.
    #Using that averages, std_devs, it will be the center of the next box, changing the bounds of the
    #initial box, thus tracking those points. 

    def rest_vars(self):

        self.count = 0.0
        self.sum_dist_x = 0.0
        self.sum_dist_y = 0.0
        self.sum_sqr_dist_x = 0.0        
        self.sum_sqr_dist_y= 0.0
        self.list_x = []
        self.list_y = []   
        self.cov_sum = 0.0
        self.cov_xy = 0.0
        self.corr_xy = 0.0

    def tracking_callback(self, msg):

        self.rest_vars()              

        for i, value in enumerate(msg.ranges):    
        
            if value*math.cos(msg.angle_min+msg.angle_increment*i) < self.average_x +self.std_dev_x and  value*math.cos(msg.angle_min+msg.angle_increment*i) > self.average_x - self.std_dev_x:  
 
                if value*math.sin(msg.angle_min+msg.angle_increment*i) >= self.average_y - self.std_dev_y and value*math.sin(msg.angle_min+msg.angle_increment*i) <= self.average_y + self.std_dev_y:       
                
                    self.list_x.append(value*math.cos(msg.angle_min+msg.angle_increment*i))
                    self.sum_sqr_dist_x += ((value*math.cos(msg.angle_min+msg.angle_increment*i))-self.average_x)**2
                    self.list_y.append(value*math.sin(msg.angle_min+msg.angle_increment*i))
                    self.sum_sqr_dist_y += ((value*math.sin(msg.angle_min+msg.angle_increment*i))-self.average_y)**2
                   
        self.count = len(self.list_x)
        print "Count:", self.count
         
        temp_x = []         
        temp_y = []

        for x,y in zip(self.list_x, self.list_y):
            if (x >= .22 or x <= -.22) or (y >=.22 or y<=-.22):
        
                temp_x.append(x)
                temp_y.append(y)

        self.list_x = temp_x 
        self.list_y = temp_y
      
        #self.list_x = [x for x in self.list_x if x >= .1 or x <= -.1] 
        #self.list_y = [y for y in self.list_y if y >= .1 or y <= -.1]      

        if self.count == 0:
            if self.prev_avg_x == 0:
                self.average_x = .9144
                self.average_y = 0

                self.std_dev_x = .3048
                self.std_dev_y = .3048
                print "No particles in area"

            else:
                self.average_x = self.prev_avg_x
                self.average_y = self.prev_avg_y
 
                self.std_dev_x = .3048 
                self.std_dev_y = .3048

                print "The average x was:", self.average_x, "The average y was:", self.average_y, "\n"
        else:
            self.prev_avg_x = self.average_x
            self.prev_avg_y = self.average_y
          
            self.prev_std_dev_x = self.std_dev_x     
            self.prev_std_dev_y = self.std_dev_y
            
            
            self.std_dev_x = (math.sqrt(self.sum_sqr_dist_x/self.count)*2 + self.prev_std_dev_x)/2 
            self.std_dev_y = (math.sqrt(self.sum_sqr_dist_y/self.count)*2 + self.prev_std_dev_y)/2

            self.average_x = sum(self.list_x)/len(self.list_x)
            self.average_y = sum(self.list_y)/len(self.list_y)
             
            for i in range(len(self.list_x)):
                self.cov_sum += (self.list_x[i]-self.average_x)*(self.list_y[i] - self.average_y)
            
            if self.count >= 2:
                self.cov_xy = self.cov_sum/(self.count - 1)
      
                self.corr_xy = self.cov_xy/((self.std_dev_x)*(self.std_dev_y))
            else:
                print "Not enough particles \n" 
           
            print "M,x Dist:", self.average_x, "| M,y Dist:", self.average_y, "\n" "Std,x:", self.std_dev_x, "Std,y:", self.std_dev_y
            print "CoVariance:", self.cov_xy, "Corr:", self.corr_xy

        self.create_box(self.average_x, self.average_y, self.std_dev_x, self.std_dev_y)
        self.create_cylinder()
        self.pub.publish(self.marker)
        self.pub.publish(self.marker2)         

if __name__ == "__main__":
	rospy.init_node('scan_values')
        Tracker1 = Operator_Tracking()
	rospy.spin()
